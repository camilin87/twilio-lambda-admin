service: twilio-lambda-admin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  twilioAccountSid: ${opt:twilioAccountSid, 'TWILIO_ACCOUNT_SID_GOES_HERE'}
  twilioAuthToken: ${opt:twilioAuthToken, 'TWILIO_AUTH_TOKEN_GOES_HERE'}
  alarmErrorThreshold: ${opt:alarmErrorThreshold, '1'}
  alarmWarnThreshold: ${opt:alarmWarnThreshold, '5'}
  alarmInterval: ${opt:alarmInterval, '10'}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

custom:
  metricsNamespace: "${self:service}-${self:provider.stage}"

functions:
  HandlerCommand:
    handler: handlerCommand.process
    timeout: 30
    events:
      - http:
          path: /v1/command
          method: post

resources:
  Resources:
    HandlerCommandLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "365"
    HandlerCommandLogGroupErrorMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName:
          Ref: HandlerCommandLogGroup
        FilterPattern: "ERROR"
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: ${self:custom.metricsNamespace}
            MetricName: "ErrorCount"
    HandlerCommandLogGroupWarnMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName:
          Ref: HandlerCommandLogGroup
        FilterPattern: "WARN"
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: ${self:custom.metricsNamespace}
            MetricName: "WarningCount"
    HandlerCommandLogGroupInfoMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName:
          Ref: HandlerCommandLogGroup
        FilterPattern: "INFO"
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: ${self:custom.metricsNamespace}
            MetricName: "InfoCount"
    AlarmsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "${self:service}-alarms-${self:provider.stage}"
        TopicName: "${self:service}-alarms-${self:provider.stage}"

    AlarmError:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - Ref: AlarmsTopic
        MetricName: ErrorCount
        Namespace: ${self:custom.metricsNamespace}
        Statistic: Sum
        Period: ${self:provider.alarmInterval}
        EvaluationPeriods: '1'
        Threshold: ${self:provider.alarmErrorThreshold}
        ComparisonOperator: GreaterThanThreshold
    AlarmWarn:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - Ref: AlarmsTopic
        MetricName: WarningCount
        Namespace: ${self:custom.metricsNamespace}
        Statistic: Sum
        Period: ${self:provider.alarmInterval}
        EvaluationPeriods: '1'
        Threshold: ${self:provider.alarmWarnThreshold}
        ComparisonOperator: GreaterThanThreshold
